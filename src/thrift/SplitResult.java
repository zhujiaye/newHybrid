/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-25")
public class SplitResult implements org.apache.thrift.TBase<SplitResult, SplitResult._Fields>, java.io.Serializable, Cloneable, Comparable<SplitResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SplitResult");

  private static final org.apache.thrift.protocol.TField M_SPLIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mSplitID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField M_REMAIN_QUERIES_BEFORE_FIELD_DESC = new org.apache.thrift.protocol.TField("mRemainQueriesBefore", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField M_WORKLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("mWorkload", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField M_REMAIN_QUERIES_AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("mRemainQueriesAfter", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField M_SENT_QUERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("mSentQueries", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField M_SUCCESS_QUERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("mSuccessQueries", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SplitResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SplitResultTupleSchemeFactory());
  }

  public int mSplitID; // required
  public int mRemainQueriesBefore; // required
  public int mWorkload; // required
  public int mRemainQueriesAfter; // required
  public int mSentQueries; // required
  public int mSuccessQueries; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    M_SPLIT_ID((short)1, "mSplitID"),
    M_REMAIN_QUERIES_BEFORE((short)2, "mRemainQueriesBefore"),
    M_WORKLOAD((short)3, "mWorkload"),
    M_REMAIN_QUERIES_AFTER((short)4, "mRemainQueriesAfter"),
    M_SENT_QUERIES((short)5, "mSentQueries"),
    M_SUCCESS_QUERIES((short)6, "mSuccessQueries");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // M_SPLIT_ID
          return M_SPLIT_ID;
        case 2: // M_REMAIN_QUERIES_BEFORE
          return M_REMAIN_QUERIES_BEFORE;
        case 3: // M_WORKLOAD
          return M_WORKLOAD;
        case 4: // M_REMAIN_QUERIES_AFTER
          return M_REMAIN_QUERIES_AFTER;
        case 5: // M_SENT_QUERIES
          return M_SENT_QUERIES;
        case 6: // M_SUCCESS_QUERIES
          return M_SUCCESS_QUERIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSPLITID_ISSET_ID = 0;
  private static final int __MREMAINQUERIESBEFORE_ISSET_ID = 1;
  private static final int __MWORKLOAD_ISSET_ID = 2;
  private static final int __MREMAINQUERIESAFTER_ISSET_ID = 3;
  private static final int __MSENTQUERIES_ISSET_ID = 4;
  private static final int __MSUCCESSQUERIES_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_SPLIT_ID, new org.apache.thrift.meta_data.FieldMetaData("mSplitID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_REMAIN_QUERIES_BEFORE, new org.apache.thrift.meta_data.FieldMetaData("mRemainQueriesBefore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_WORKLOAD, new org.apache.thrift.meta_data.FieldMetaData("mWorkload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_REMAIN_QUERIES_AFTER, new org.apache.thrift.meta_data.FieldMetaData("mRemainQueriesAfter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_SENT_QUERIES, new org.apache.thrift.meta_data.FieldMetaData("mSentQueries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_SUCCESS_QUERIES, new org.apache.thrift.meta_data.FieldMetaData("mSuccessQueries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SplitResult.class, metaDataMap);
  }

  public SplitResult() {
  }

  public SplitResult(
    int mSplitID,
    int mRemainQueriesBefore,
    int mWorkload,
    int mRemainQueriesAfter,
    int mSentQueries,
    int mSuccessQueries)
  {
    this();
    this.mSplitID = mSplitID;
    setMSplitIDIsSet(true);
    this.mRemainQueriesBefore = mRemainQueriesBefore;
    setMRemainQueriesBeforeIsSet(true);
    this.mWorkload = mWorkload;
    setMWorkloadIsSet(true);
    this.mRemainQueriesAfter = mRemainQueriesAfter;
    setMRemainQueriesAfterIsSet(true);
    this.mSentQueries = mSentQueries;
    setMSentQueriesIsSet(true);
    this.mSuccessQueries = mSuccessQueries;
    setMSuccessQueriesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SplitResult(SplitResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mSplitID = other.mSplitID;
    this.mRemainQueriesBefore = other.mRemainQueriesBefore;
    this.mWorkload = other.mWorkload;
    this.mRemainQueriesAfter = other.mRemainQueriesAfter;
    this.mSentQueries = other.mSentQueries;
    this.mSuccessQueries = other.mSuccessQueries;
  }

  public SplitResult deepCopy() {
    return new SplitResult(this);
  }

  @Override
  public void clear() {
    setMSplitIDIsSet(false);
    this.mSplitID = 0;
    setMRemainQueriesBeforeIsSet(false);
    this.mRemainQueriesBefore = 0;
    setMWorkloadIsSet(false);
    this.mWorkload = 0;
    setMRemainQueriesAfterIsSet(false);
    this.mRemainQueriesAfter = 0;
    setMSentQueriesIsSet(false);
    this.mSentQueries = 0;
    setMSuccessQueriesIsSet(false);
    this.mSuccessQueries = 0;
  }

  public int getMSplitID() {
    return this.mSplitID;
  }

  public SplitResult setMSplitID(int mSplitID) {
    this.mSplitID = mSplitID;
    setMSplitIDIsSet(true);
    return this;
  }

  public void unsetMSplitID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSPLITID_ISSET_ID);
  }

  /** Returns true if field mSplitID is set (has been assigned a value) and false otherwise */
  public boolean isSetMSplitID() {
    return EncodingUtils.testBit(__isset_bitfield, __MSPLITID_ISSET_ID);
  }

  public void setMSplitIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSPLITID_ISSET_ID, value);
  }

  public int getMRemainQueriesBefore() {
    return this.mRemainQueriesBefore;
  }

  public SplitResult setMRemainQueriesBefore(int mRemainQueriesBefore) {
    this.mRemainQueriesBefore = mRemainQueriesBefore;
    setMRemainQueriesBeforeIsSet(true);
    return this;
  }

  public void unsetMRemainQueriesBefore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MREMAINQUERIESBEFORE_ISSET_ID);
  }

  /** Returns true if field mRemainQueriesBefore is set (has been assigned a value) and false otherwise */
  public boolean isSetMRemainQueriesBefore() {
    return EncodingUtils.testBit(__isset_bitfield, __MREMAINQUERIESBEFORE_ISSET_ID);
  }

  public void setMRemainQueriesBeforeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MREMAINQUERIESBEFORE_ISSET_ID, value);
  }

  public int getMWorkload() {
    return this.mWorkload;
  }

  public SplitResult setMWorkload(int mWorkload) {
    this.mWorkload = mWorkload;
    setMWorkloadIsSet(true);
    return this;
  }

  public void unsetMWorkload() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MWORKLOAD_ISSET_ID);
  }

  /** Returns true if field mWorkload is set (has been assigned a value) and false otherwise */
  public boolean isSetMWorkload() {
    return EncodingUtils.testBit(__isset_bitfield, __MWORKLOAD_ISSET_ID);
  }

  public void setMWorkloadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MWORKLOAD_ISSET_ID, value);
  }

  public int getMRemainQueriesAfter() {
    return this.mRemainQueriesAfter;
  }

  public SplitResult setMRemainQueriesAfter(int mRemainQueriesAfter) {
    this.mRemainQueriesAfter = mRemainQueriesAfter;
    setMRemainQueriesAfterIsSet(true);
    return this;
  }

  public void unsetMRemainQueriesAfter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MREMAINQUERIESAFTER_ISSET_ID);
  }

  /** Returns true if field mRemainQueriesAfter is set (has been assigned a value) and false otherwise */
  public boolean isSetMRemainQueriesAfter() {
    return EncodingUtils.testBit(__isset_bitfield, __MREMAINQUERIESAFTER_ISSET_ID);
  }

  public void setMRemainQueriesAfterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MREMAINQUERIESAFTER_ISSET_ID, value);
  }

  public int getMSentQueries() {
    return this.mSentQueries;
  }

  public SplitResult setMSentQueries(int mSentQueries) {
    this.mSentQueries = mSentQueries;
    setMSentQueriesIsSet(true);
    return this;
  }

  public void unsetMSentQueries() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSENTQUERIES_ISSET_ID);
  }

  /** Returns true if field mSentQueries is set (has been assigned a value) and false otherwise */
  public boolean isSetMSentQueries() {
    return EncodingUtils.testBit(__isset_bitfield, __MSENTQUERIES_ISSET_ID);
  }

  public void setMSentQueriesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSENTQUERIES_ISSET_ID, value);
  }

  public int getMSuccessQueries() {
    return this.mSuccessQueries;
  }

  public SplitResult setMSuccessQueries(int mSuccessQueries) {
    this.mSuccessQueries = mSuccessQueries;
    setMSuccessQueriesIsSet(true);
    return this;
  }

  public void unsetMSuccessQueries() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSUCCESSQUERIES_ISSET_ID);
  }

  /** Returns true if field mSuccessQueries is set (has been assigned a value) and false otherwise */
  public boolean isSetMSuccessQueries() {
    return EncodingUtils.testBit(__isset_bitfield, __MSUCCESSQUERIES_ISSET_ID);
  }

  public void setMSuccessQueriesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSUCCESSQUERIES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_SPLIT_ID:
      if (value == null) {
        unsetMSplitID();
      } else {
        setMSplitID((Integer)value);
      }
      break;

    case M_REMAIN_QUERIES_BEFORE:
      if (value == null) {
        unsetMRemainQueriesBefore();
      } else {
        setMRemainQueriesBefore((Integer)value);
      }
      break;

    case M_WORKLOAD:
      if (value == null) {
        unsetMWorkload();
      } else {
        setMWorkload((Integer)value);
      }
      break;

    case M_REMAIN_QUERIES_AFTER:
      if (value == null) {
        unsetMRemainQueriesAfter();
      } else {
        setMRemainQueriesAfter((Integer)value);
      }
      break;

    case M_SENT_QUERIES:
      if (value == null) {
        unsetMSentQueries();
      } else {
        setMSentQueries((Integer)value);
      }
      break;

    case M_SUCCESS_QUERIES:
      if (value == null) {
        unsetMSuccessQueries();
      } else {
        setMSuccessQueries((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_SPLIT_ID:
      return Integer.valueOf(getMSplitID());

    case M_REMAIN_QUERIES_BEFORE:
      return Integer.valueOf(getMRemainQueriesBefore());

    case M_WORKLOAD:
      return Integer.valueOf(getMWorkload());

    case M_REMAIN_QUERIES_AFTER:
      return Integer.valueOf(getMRemainQueriesAfter());

    case M_SENT_QUERIES:
      return Integer.valueOf(getMSentQueries());

    case M_SUCCESS_QUERIES:
      return Integer.valueOf(getMSuccessQueries());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_SPLIT_ID:
      return isSetMSplitID();
    case M_REMAIN_QUERIES_BEFORE:
      return isSetMRemainQueriesBefore();
    case M_WORKLOAD:
      return isSetMWorkload();
    case M_REMAIN_QUERIES_AFTER:
      return isSetMRemainQueriesAfter();
    case M_SENT_QUERIES:
      return isSetMSentQueries();
    case M_SUCCESS_QUERIES:
      return isSetMSuccessQueries();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SplitResult)
      return this.equals((SplitResult)that);
    return false;
  }

  public boolean equals(SplitResult that) {
    if (that == null)
      return false;

    boolean this_present_mSplitID = true;
    boolean that_present_mSplitID = true;
    if (this_present_mSplitID || that_present_mSplitID) {
      if (!(this_present_mSplitID && that_present_mSplitID))
        return false;
      if (this.mSplitID != that.mSplitID)
        return false;
    }

    boolean this_present_mRemainQueriesBefore = true;
    boolean that_present_mRemainQueriesBefore = true;
    if (this_present_mRemainQueriesBefore || that_present_mRemainQueriesBefore) {
      if (!(this_present_mRemainQueriesBefore && that_present_mRemainQueriesBefore))
        return false;
      if (this.mRemainQueriesBefore != that.mRemainQueriesBefore)
        return false;
    }

    boolean this_present_mWorkload = true;
    boolean that_present_mWorkload = true;
    if (this_present_mWorkload || that_present_mWorkload) {
      if (!(this_present_mWorkload && that_present_mWorkload))
        return false;
      if (this.mWorkload != that.mWorkload)
        return false;
    }

    boolean this_present_mRemainQueriesAfter = true;
    boolean that_present_mRemainQueriesAfter = true;
    if (this_present_mRemainQueriesAfter || that_present_mRemainQueriesAfter) {
      if (!(this_present_mRemainQueriesAfter && that_present_mRemainQueriesAfter))
        return false;
      if (this.mRemainQueriesAfter != that.mRemainQueriesAfter)
        return false;
    }

    boolean this_present_mSentQueries = true;
    boolean that_present_mSentQueries = true;
    if (this_present_mSentQueries || that_present_mSentQueries) {
      if (!(this_present_mSentQueries && that_present_mSentQueries))
        return false;
      if (this.mSentQueries != that.mSentQueries)
        return false;
    }

    boolean this_present_mSuccessQueries = true;
    boolean that_present_mSuccessQueries = true;
    if (this_present_mSuccessQueries || that_present_mSuccessQueries) {
      if (!(this_present_mSuccessQueries && that_present_mSuccessQueries))
        return false;
      if (this.mSuccessQueries != that.mSuccessQueries)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mSplitID = true;
    list.add(present_mSplitID);
    if (present_mSplitID)
      list.add(mSplitID);

    boolean present_mRemainQueriesBefore = true;
    list.add(present_mRemainQueriesBefore);
    if (present_mRemainQueriesBefore)
      list.add(mRemainQueriesBefore);

    boolean present_mWorkload = true;
    list.add(present_mWorkload);
    if (present_mWorkload)
      list.add(mWorkload);

    boolean present_mRemainQueriesAfter = true;
    list.add(present_mRemainQueriesAfter);
    if (present_mRemainQueriesAfter)
      list.add(mRemainQueriesAfter);

    boolean present_mSentQueries = true;
    list.add(present_mSentQueries);
    if (present_mSentQueries)
      list.add(mSentQueries);

    boolean present_mSuccessQueries = true;
    list.add(present_mSuccessQueries);
    if (present_mSuccessQueries)
      list.add(mSuccessQueries);

    return list.hashCode();
  }

  @Override
  public int compareTo(SplitResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMSplitID()).compareTo(other.isSetMSplitID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMSplitID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mSplitID, other.mSplitID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMRemainQueriesBefore()).compareTo(other.isSetMRemainQueriesBefore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMRemainQueriesBefore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mRemainQueriesBefore, other.mRemainQueriesBefore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMWorkload()).compareTo(other.isSetMWorkload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMWorkload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mWorkload, other.mWorkload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMRemainQueriesAfter()).compareTo(other.isSetMRemainQueriesAfter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMRemainQueriesAfter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mRemainQueriesAfter, other.mRemainQueriesAfter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMSentQueries()).compareTo(other.isSetMSentQueries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMSentQueries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mSentQueries, other.mSentQueries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMSuccessQueries()).compareTo(other.isSetMSuccessQueries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMSuccessQueries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mSuccessQueries, other.mSuccessQueries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SplitResult(");
    boolean first = true;

    sb.append("mSplitID:");
    sb.append(this.mSplitID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mRemainQueriesBefore:");
    sb.append(this.mRemainQueriesBefore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mWorkload:");
    sb.append(this.mWorkload);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mRemainQueriesAfter:");
    sb.append(this.mRemainQueriesAfter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mSentQueries:");
    sb.append(this.mSentQueries);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mSuccessQueries:");
    sb.append(this.mSuccessQueries);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SplitResultStandardSchemeFactory implements SchemeFactory {
    public SplitResultStandardScheme getScheme() {
      return new SplitResultStandardScheme();
    }
  }

  private static class SplitResultStandardScheme extends StandardScheme<SplitResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SplitResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // M_SPLIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mSplitID = iprot.readI32();
              struct.setMSplitIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // M_REMAIN_QUERIES_BEFORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mRemainQueriesBefore = iprot.readI32();
              struct.setMRemainQueriesBeforeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_WORKLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mWorkload = iprot.readI32();
              struct.setMWorkloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // M_REMAIN_QUERIES_AFTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mRemainQueriesAfter = iprot.readI32();
              struct.setMRemainQueriesAfterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // M_SENT_QUERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mSentQueries = iprot.readI32();
              struct.setMSentQueriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // M_SUCCESS_QUERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mSuccessQueries = iprot.readI32();
              struct.setMSuccessQueriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SplitResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(M_SPLIT_ID_FIELD_DESC);
      oprot.writeI32(struct.mSplitID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_REMAIN_QUERIES_BEFORE_FIELD_DESC);
      oprot.writeI32(struct.mRemainQueriesBefore);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_WORKLOAD_FIELD_DESC);
      oprot.writeI32(struct.mWorkload);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_REMAIN_QUERIES_AFTER_FIELD_DESC);
      oprot.writeI32(struct.mRemainQueriesAfter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_SENT_QUERIES_FIELD_DESC);
      oprot.writeI32(struct.mSentQueries);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_SUCCESS_QUERIES_FIELD_DESC);
      oprot.writeI32(struct.mSuccessQueries);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SplitResultTupleSchemeFactory implements SchemeFactory {
    public SplitResultTupleScheme getScheme() {
      return new SplitResultTupleScheme();
    }
  }

  private static class SplitResultTupleScheme extends TupleScheme<SplitResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SplitResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMSplitID()) {
        optionals.set(0);
      }
      if (struct.isSetMRemainQueriesBefore()) {
        optionals.set(1);
      }
      if (struct.isSetMWorkload()) {
        optionals.set(2);
      }
      if (struct.isSetMRemainQueriesAfter()) {
        optionals.set(3);
      }
      if (struct.isSetMSentQueries()) {
        optionals.set(4);
      }
      if (struct.isSetMSuccessQueries()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMSplitID()) {
        oprot.writeI32(struct.mSplitID);
      }
      if (struct.isSetMRemainQueriesBefore()) {
        oprot.writeI32(struct.mRemainQueriesBefore);
      }
      if (struct.isSetMWorkload()) {
        oprot.writeI32(struct.mWorkload);
      }
      if (struct.isSetMRemainQueriesAfter()) {
        oprot.writeI32(struct.mRemainQueriesAfter);
      }
      if (struct.isSetMSentQueries()) {
        oprot.writeI32(struct.mSentQueries);
      }
      if (struct.isSetMSuccessQueries()) {
        oprot.writeI32(struct.mSuccessQueries);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SplitResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.mSplitID = iprot.readI32();
        struct.setMSplitIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mRemainQueriesBefore = iprot.readI32();
        struct.setMRemainQueriesBeforeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mWorkload = iprot.readI32();
        struct.setMWorkloadIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mRemainQueriesAfter = iprot.readI32();
        struct.setMRemainQueriesAfterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mSentQueries = iprot.readI32();
        struct.setMSentQueriesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mSuccessQueries = iprot.readI32();
        struct.setMSuccessQueriesIsSet(true);
      }
    }
  }

}

