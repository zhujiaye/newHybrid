/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-16")
public class WorkerService {

  public interface Iface {

    public void tenant_exportTempDb(int ID, TempDbInfo tempDbInfo) throws DbmsException, org.apache.thrift.TException;

    public void tenant_moveTempDb(int ID, TempDbInfo tempDbInfo, ServerWorkerInfo workerInfo) throws DbmsException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void tenant_exportTempDb(int ID, TempDbInfo tempDbInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void tenant_moveTempDb(int ID, TempDbInfo tempDbInfo, ServerWorkerInfo workerInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void tenant_exportTempDb(int ID, TempDbInfo tempDbInfo) throws DbmsException, org.apache.thrift.TException
    {
      send_tenant_exportTempDb(ID, tempDbInfo);
      recv_tenant_exportTempDb();
    }

    public void send_tenant_exportTempDb(int ID, TempDbInfo tempDbInfo) throws org.apache.thrift.TException
    {
      tenant_exportTempDb_args args = new tenant_exportTempDb_args();
      args.setID(ID);
      args.setTempDbInfo(tempDbInfo);
      sendBase("tenant_exportTempDb", args);
    }

    public void recv_tenant_exportTempDb() throws DbmsException, org.apache.thrift.TException
    {
      tenant_exportTempDb_result result = new tenant_exportTempDb_result();
      receiveBase(result, "tenant_exportTempDb");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void tenant_moveTempDb(int ID, TempDbInfo tempDbInfo, ServerWorkerInfo workerInfo) throws DbmsException, org.apache.thrift.TException
    {
      send_tenant_moveTempDb(ID, tempDbInfo, workerInfo);
      recv_tenant_moveTempDb();
    }

    public void send_tenant_moveTempDb(int ID, TempDbInfo tempDbInfo, ServerWorkerInfo workerInfo) throws org.apache.thrift.TException
    {
      tenant_moveTempDb_args args = new tenant_moveTempDb_args();
      args.setID(ID);
      args.setTempDbInfo(tempDbInfo);
      args.setWorkerInfo(workerInfo);
      sendBase("tenant_moveTempDb", args);
    }

    public void recv_tenant_moveTempDb() throws DbmsException, org.apache.thrift.TException
    {
      tenant_moveTempDb_result result = new tenant_moveTempDb_result();
      receiveBase(result, "tenant_moveTempDb");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void tenant_exportTempDb(int ID, TempDbInfo tempDbInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tenant_exportTempDb_call method_call = new tenant_exportTempDb_call(ID, tempDbInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tenant_exportTempDb_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int ID;
      private TempDbInfo tempDbInfo;
      public tenant_exportTempDb_call(int ID, TempDbInfo tempDbInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ID = ID;
        this.tempDbInfo = tempDbInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tenant_exportTempDb", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tenant_exportTempDb_args args = new tenant_exportTempDb_args();
        args.setID(ID);
        args.setTempDbInfo(tempDbInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DbmsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tenant_exportTempDb();
      }
    }

    public void tenant_moveTempDb(int ID, TempDbInfo tempDbInfo, ServerWorkerInfo workerInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tenant_moveTempDb_call method_call = new tenant_moveTempDb_call(ID, tempDbInfo, workerInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tenant_moveTempDb_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int ID;
      private TempDbInfo tempDbInfo;
      private ServerWorkerInfo workerInfo;
      public tenant_moveTempDb_call(int ID, TempDbInfo tempDbInfo, ServerWorkerInfo workerInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ID = ID;
        this.tempDbInfo = tempDbInfo;
        this.workerInfo = workerInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tenant_moveTempDb", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tenant_moveTempDb_args args = new tenant_moveTempDb_args();
        args.setID(ID);
        args.setTempDbInfo(tempDbInfo);
        args.setWorkerInfo(workerInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DbmsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tenant_moveTempDb();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("tenant_exportTempDb", new tenant_exportTempDb());
      processMap.put("tenant_moveTempDb", new tenant_moveTempDb());
      return processMap;
    }

    public static class tenant_exportTempDb<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tenant_exportTempDb_args> {
      public tenant_exportTempDb() {
        super("tenant_exportTempDb");
      }

      public tenant_exportTempDb_args getEmptyArgsInstance() {
        return new tenant_exportTempDb_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tenant_exportTempDb_result getResult(I iface, tenant_exportTempDb_args args) throws org.apache.thrift.TException {
        tenant_exportTempDb_result result = new tenant_exportTempDb_result();
        try {
          iface.tenant_exportTempDb(args.ID, args.tempDbInfo);
        } catch (DbmsException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class tenant_moveTempDb<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tenant_moveTempDb_args> {
      public tenant_moveTempDb() {
        super("tenant_moveTempDb");
      }

      public tenant_moveTempDb_args getEmptyArgsInstance() {
        return new tenant_moveTempDb_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tenant_moveTempDb_result getResult(I iface, tenant_moveTempDb_args args) throws org.apache.thrift.TException {
        tenant_moveTempDb_result result = new tenant_moveTempDb_result();
        try {
          iface.tenant_moveTempDb(args.ID, args.tempDbInfo, args.workerInfo);
        } catch (DbmsException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("tenant_exportTempDb", new tenant_exportTempDb());
      processMap.put("tenant_moveTempDb", new tenant_moveTempDb());
      return processMap;
    }

    public static class tenant_exportTempDb<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, tenant_exportTempDb_args, Void> {
      public tenant_exportTempDb() {
        super("tenant_exportTempDb");
      }

      public tenant_exportTempDb_args getEmptyArgsInstance() {
        return new tenant_exportTempDb_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            tenant_exportTempDb_result result = new tenant_exportTempDb_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            tenant_exportTempDb_result result = new tenant_exportTempDb_result();
            if (e instanceof DbmsException) {
                        result.e = (DbmsException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, tenant_exportTempDb_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.tenant_exportTempDb(args.ID, args.tempDbInfo,resultHandler);
      }
    }

    public static class tenant_moveTempDb<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, tenant_moveTempDb_args, Void> {
      public tenant_moveTempDb() {
        super("tenant_moveTempDb");
      }

      public tenant_moveTempDb_args getEmptyArgsInstance() {
        return new tenant_moveTempDb_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            tenant_moveTempDb_result result = new tenant_moveTempDb_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            tenant_moveTempDb_result result = new tenant_moveTempDb_result();
            if (e instanceof DbmsException) {
                        result.e = (DbmsException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, tenant_moveTempDb_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.tenant_moveTempDb(args.ID, args.tempDbInfo, args.workerInfo,resultHandler);
      }
    }

  }

  public static class tenant_exportTempDb_args implements org.apache.thrift.TBase<tenant_exportTempDb_args, tenant_exportTempDb_args._Fields>, java.io.Serializable, Cloneable, Comparable<tenant_exportTempDb_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tenant_exportTempDb_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TEMP_DB_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tempDbInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tenant_exportTempDb_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tenant_exportTempDb_argsTupleSchemeFactory());
    }

    public int ID; // required
    public TempDbInfo tempDbInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "ID"),
      TEMP_DB_INFO((short)2, "tempDbInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // TEMP_DB_INFO
            return TEMP_DB_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TEMP_DB_INFO, new org.apache.thrift.meta_data.FieldMetaData("tempDbInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TempDbInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tenant_exportTempDb_args.class, metaDataMap);
    }

    public tenant_exportTempDb_args() {
    }

    public tenant_exportTempDb_args(
      int ID,
      TempDbInfo tempDbInfo)
    {
      this();
      this.ID = ID;
      setIDIsSet(true);
      this.tempDbInfo = tempDbInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tenant_exportTempDb_args(tenant_exportTempDb_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ID = other.ID;
      if (other.isSetTempDbInfo()) {
        this.tempDbInfo = new TempDbInfo(other.tempDbInfo);
      }
    }

    public tenant_exportTempDb_args deepCopy() {
      return new tenant_exportTempDb_args(this);
    }

    @Override
    public void clear() {
      setIDIsSet(false);
      this.ID = 0;
      this.tempDbInfo = null;
    }

    public int getID() {
      return this.ID;
    }

    public tenant_exportTempDb_args setID(int ID) {
      this.ID = ID;
      setIDIsSet(true);
      return this;
    }

    public void unsetID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field ID is set (has been assigned a value) and false otherwise */
    public boolean isSetID() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public TempDbInfo getTempDbInfo() {
      return this.tempDbInfo;
    }

    public tenant_exportTempDb_args setTempDbInfo(TempDbInfo tempDbInfo) {
      this.tempDbInfo = tempDbInfo;
      return this;
    }

    public void unsetTempDbInfo() {
      this.tempDbInfo = null;
    }

    /** Returns true if field tempDbInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetTempDbInfo() {
      return this.tempDbInfo != null;
    }

    public void setTempDbInfoIsSet(boolean value) {
      if (!value) {
        this.tempDbInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetID();
        } else {
          setID((Integer)value);
        }
        break;

      case TEMP_DB_INFO:
        if (value == null) {
          unsetTempDbInfo();
        } else {
          setTempDbInfo((TempDbInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getID());

      case TEMP_DB_INFO:
        return getTempDbInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetID();
      case TEMP_DB_INFO:
        return isSetTempDbInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tenant_exportTempDb_args)
        return this.equals((tenant_exportTempDb_args)that);
      return false;
    }

    public boolean equals(tenant_exportTempDb_args that) {
      if (that == null)
        return false;

      boolean this_present_ID = true;
      boolean that_present_ID = true;
      if (this_present_ID || that_present_ID) {
        if (!(this_present_ID && that_present_ID))
          return false;
        if (this.ID != that.ID)
          return false;
      }

      boolean this_present_tempDbInfo = true && this.isSetTempDbInfo();
      boolean that_present_tempDbInfo = true && that.isSetTempDbInfo();
      if (this_present_tempDbInfo || that_present_tempDbInfo) {
        if (!(this_present_tempDbInfo && that_present_tempDbInfo))
          return false;
        if (!this.tempDbInfo.equals(that.tempDbInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ID = true;
      list.add(present_ID);
      if (present_ID)
        list.add(ID);

      boolean present_tempDbInfo = true && (isSetTempDbInfo());
      list.add(present_tempDbInfo);
      if (present_tempDbInfo)
        list.add(tempDbInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(tenant_exportTempDb_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTempDbInfo()).compareTo(other.isSetTempDbInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTempDbInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tempDbInfo, other.tempDbInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tenant_exportTempDb_args(");
      boolean first = true;

      sb.append("ID:");
      sb.append(this.ID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tempDbInfo:");
      if (this.tempDbInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tempDbInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tempDbInfo != null) {
        tempDbInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tenant_exportTempDb_argsStandardSchemeFactory implements SchemeFactory {
      public tenant_exportTempDb_argsStandardScheme getScheme() {
        return new tenant_exportTempDb_argsStandardScheme();
      }
    }

    private static class tenant_exportTempDb_argsStandardScheme extends StandardScheme<tenant_exportTempDb_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tenant_exportTempDb_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ID = iprot.readI32();
                struct.setIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEMP_DB_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tempDbInfo = new TempDbInfo();
                struct.tempDbInfo.read(iprot);
                struct.setTempDbInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tenant_exportTempDb_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.ID);
        oprot.writeFieldEnd();
        if (struct.tempDbInfo != null) {
          oprot.writeFieldBegin(TEMP_DB_INFO_FIELD_DESC);
          struct.tempDbInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tenant_exportTempDb_argsTupleSchemeFactory implements SchemeFactory {
      public tenant_exportTempDb_argsTupleScheme getScheme() {
        return new tenant_exportTempDb_argsTupleScheme();
      }
    }

    private static class tenant_exportTempDb_argsTupleScheme extends TupleScheme<tenant_exportTempDb_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tenant_exportTempDb_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetID()) {
          optionals.set(0);
        }
        if (struct.isSetTempDbInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetID()) {
          oprot.writeI32(struct.ID);
        }
        if (struct.isSetTempDbInfo()) {
          struct.tempDbInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tenant_exportTempDb_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ID = iprot.readI32();
          struct.setIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tempDbInfo = new TempDbInfo();
          struct.tempDbInfo.read(iprot);
          struct.setTempDbInfoIsSet(true);
        }
      }
    }

  }

  public static class tenant_exportTempDb_result implements org.apache.thrift.TBase<tenant_exportTempDb_result, tenant_exportTempDb_result._Fields>, java.io.Serializable, Cloneable, Comparable<tenant_exportTempDb_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tenant_exportTempDb_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tenant_exportTempDb_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tenant_exportTempDb_resultTupleSchemeFactory());
    }

    public DbmsException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tenant_exportTempDb_result.class, metaDataMap);
    }

    public tenant_exportTempDb_result() {
    }

    public tenant_exportTempDb_result(
      DbmsException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tenant_exportTempDb_result(tenant_exportTempDb_result other) {
      if (other.isSetE()) {
        this.e = new DbmsException(other.e);
      }
    }

    public tenant_exportTempDb_result deepCopy() {
      return new tenant_exportTempDb_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DbmsException getE() {
      return this.e;
    }

    public tenant_exportTempDb_result setE(DbmsException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DbmsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tenant_exportTempDb_result)
        return this.equals((tenant_exportTempDb_result)that);
      return false;
    }

    public boolean equals(tenant_exportTempDb_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(tenant_exportTempDb_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tenant_exportTempDb_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tenant_exportTempDb_resultStandardSchemeFactory implements SchemeFactory {
      public tenant_exportTempDb_resultStandardScheme getScheme() {
        return new tenant_exportTempDb_resultStandardScheme();
      }
    }

    private static class tenant_exportTempDb_resultStandardScheme extends StandardScheme<tenant_exportTempDb_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tenant_exportTempDb_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DbmsException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tenant_exportTempDb_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tenant_exportTempDb_resultTupleSchemeFactory implements SchemeFactory {
      public tenant_exportTempDb_resultTupleScheme getScheme() {
        return new tenant_exportTempDb_resultTupleScheme();
      }
    }

    private static class tenant_exportTempDb_resultTupleScheme extends TupleScheme<tenant_exportTempDb_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tenant_exportTempDb_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tenant_exportTempDb_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DbmsException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class tenant_moveTempDb_args implements org.apache.thrift.TBase<tenant_moveTempDb_args, tenant_moveTempDb_args._Fields>, java.io.Serializable, Cloneable, Comparable<tenant_moveTempDb_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tenant_moveTempDb_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TEMP_DB_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tempDbInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField WORKER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("workerInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tenant_moveTempDb_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tenant_moveTempDb_argsTupleSchemeFactory());
    }

    public int ID; // required
    public TempDbInfo tempDbInfo; // required
    public ServerWorkerInfo workerInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "ID"),
      TEMP_DB_INFO((short)2, "tempDbInfo"),
      WORKER_INFO((short)3, "workerInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // TEMP_DB_INFO
            return TEMP_DB_INFO;
          case 3: // WORKER_INFO
            return WORKER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TEMP_DB_INFO, new org.apache.thrift.meta_data.FieldMetaData("tempDbInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TempDbInfo.class)));
      tmpMap.put(_Fields.WORKER_INFO, new org.apache.thrift.meta_data.FieldMetaData("workerInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerWorkerInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tenant_moveTempDb_args.class, metaDataMap);
    }

    public tenant_moveTempDb_args() {
    }

    public tenant_moveTempDb_args(
      int ID,
      TempDbInfo tempDbInfo,
      ServerWorkerInfo workerInfo)
    {
      this();
      this.ID = ID;
      setIDIsSet(true);
      this.tempDbInfo = tempDbInfo;
      this.workerInfo = workerInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tenant_moveTempDb_args(tenant_moveTempDb_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ID = other.ID;
      if (other.isSetTempDbInfo()) {
        this.tempDbInfo = new TempDbInfo(other.tempDbInfo);
      }
      if (other.isSetWorkerInfo()) {
        this.workerInfo = new ServerWorkerInfo(other.workerInfo);
      }
    }

    public tenant_moveTempDb_args deepCopy() {
      return new tenant_moveTempDb_args(this);
    }

    @Override
    public void clear() {
      setIDIsSet(false);
      this.ID = 0;
      this.tempDbInfo = null;
      this.workerInfo = null;
    }

    public int getID() {
      return this.ID;
    }

    public tenant_moveTempDb_args setID(int ID) {
      this.ID = ID;
      setIDIsSet(true);
      return this;
    }

    public void unsetID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field ID is set (has been assigned a value) and false otherwise */
    public boolean isSetID() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public TempDbInfo getTempDbInfo() {
      return this.tempDbInfo;
    }

    public tenant_moveTempDb_args setTempDbInfo(TempDbInfo tempDbInfo) {
      this.tempDbInfo = tempDbInfo;
      return this;
    }

    public void unsetTempDbInfo() {
      this.tempDbInfo = null;
    }

    /** Returns true if field tempDbInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetTempDbInfo() {
      return this.tempDbInfo != null;
    }

    public void setTempDbInfoIsSet(boolean value) {
      if (!value) {
        this.tempDbInfo = null;
      }
    }

    public ServerWorkerInfo getWorkerInfo() {
      return this.workerInfo;
    }

    public tenant_moveTempDb_args setWorkerInfo(ServerWorkerInfo workerInfo) {
      this.workerInfo = workerInfo;
      return this;
    }

    public void unsetWorkerInfo() {
      this.workerInfo = null;
    }

    /** Returns true if field workerInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerInfo() {
      return this.workerInfo != null;
    }

    public void setWorkerInfoIsSet(boolean value) {
      if (!value) {
        this.workerInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetID();
        } else {
          setID((Integer)value);
        }
        break;

      case TEMP_DB_INFO:
        if (value == null) {
          unsetTempDbInfo();
        } else {
          setTempDbInfo((TempDbInfo)value);
        }
        break;

      case WORKER_INFO:
        if (value == null) {
          unsetWorkerInfo();
        } else {
          setWorkerInfo((ServerWorkerInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getID());

      case TEMP_DB_INFO:
        return getTempDbInfo();

      case WORKER_INFO:
        return getWorkerInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetID();
      case TEMP_DB_INFO:
        return isSetTempDbInfo();
      case WORKER_INFO:
        return isSetWorkerInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tenant_moveTempDb_args)
        return this.equals((tenant_moveTempDb_args)that);
      return false;
    }

    public boolean equals(tenant_moveTempDb_args that) {
      if (that == null)
        return false;

      boolean this_present_ID = true;
      boolean that_present_ID = true;
      if (this_present_ID || that_present_ID) {
        if (!(this_present_ID && that_present_ID))
          return false;
        if (this.ID != that.ID)
          return false;
      }

      boolean this_present_tempDbInfo = true && this.isSetTempDbInfo();
      boolean that_present_tempDbInfo = true && that.isSetTempDbInfo();
      if (this_present_tempDbInfo || that_present_tempDbInfo) {
        if (!(this_present_tempDbInfo && that_present_tempDbInfo))
          return false;
        if (!this.tempDbInfo.equals(that.tempDbInfo))
          return false;
      }

      boolean this_present_workerInfo = true && this.isSetWorkerInfo();
      boolean that_present_workerInfo = true && that.isSetWorkerInfo();
      if (this_present_workerInfo || that_present_workerInfo) {
        if (!(this_present_workerInfo && that_present_workerInfo))
          return false;
        if (!this.workerInfo.equals(that.workerInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ID = true;
      list.add(present_ID);
      if (present_ID)
        list.add(ID);

      boolean present_tempDbInfo = true && (isSetTempDbInfo());
      list.add(present_tempDbInfo);
      if (present_tempDbInfo)
        list.add(tempDbInfo);

      boolean present_workerInfo = true && (isSetWorkerInfo());
      list.add(present_workerInfo);
      if (present_workerInfo)
        list.add(workerInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(tenant_moveTempDb_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTempDbInfo()).compareTo(other.isSetTempDbInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTempDbInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tempDbInfo, other.tempDbInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorkerInfo()).compareTo(other.isSetWorkerInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerInfo, other.workerInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tenant_moveTempDb_args(");
      boolean first = true;

      sb.append("ID:");
      sb.append(this.ID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tempDbInfo:");
      if (this.tempDbInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tempDbInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("workerInfo:");
      if (this.workerInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.workerInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tempDbInfo != null) {
        tempDbInfo.validate();
      }
      if (workerInfo != null) {
        workerInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tenant_moveTempDb_argsStandardSchemeFactory implements SchemeFactory {
      public tenant_moveTempDb_argsStandardScheme getScheme() {
        return new tenant_moveTempDb_argsStandardScheme();
      }
    }

    private static class tenant_moveTempDb_argsStandardScheme extends StandardScheme<tenant_moveTempDb_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tenant_moveTempDb_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ID = iprot.readI32();
                struct.setIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEMP_DB_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tempDbInfo = new TempDbInfo();
                struct.tempDbInfo.read(iprot);
                struct.setTempDbInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WORKER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workerInfo = new ServerWorkerInfo();
                struct.workerInfo.read(iprot);
                struct.setWorkerInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tenant_moveTempDb_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.ID);
        oprot.writeFieldEnd();
        if (struct.tempDbInfo != null) {
          oprot.writeFieldBegin(TEMP_DB_INFO_FIELD_DESC);
          struct.tempDbInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.workerInfo != null) {
          oprot.writeFieldBegin(WORKER_INFO_FIELD_DESC);
          struct.workerInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tenant_moveTempDb_argsTupleSchemeFactory implements SchemeFactory {
      public tenant_moveTempDb_argsTupleScheme getScheme() {
        return new tenant_moveTempDb_argsTupleScheme();
      }
    }

    private static class tenant_moveTempDb_argsTupleScheme extends TupleScheme<tenant_moveTempDb_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tenant_moveTempDb_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetID()) {
          optionals.set(0);
        }
        if (struct.isSetTempDbInfo()) {
          optionals.set(1);
        }
        if (struct.isSetWorkerInfo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetID()) {
          oprot.writeI32(struct.ID);
        }
        if (struct.isSetTempDbInfo()) {
          struct.tempDbInfo.write(oprot);
        }
        if (struct.isSetWorkerInfo()) {
          struct.workerInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tenant_moveTempDb_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ID = iprot.readI32();
          struct.setIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tempDbInfo = new TempDbInfo();
          struct.tempDbInfo.read(iprot);
          struct.setTempDbInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.workerInfo = new ServerWorkerInfo();
          struct.workerInfo.read(iprot);
          struct.setWorkerInfoIsSet(true);
        }
      }
    }

  }

  public static class tenant_moveTempDb_result implements org.apache.thrift.TBase<tenant_moveTempDb_result, tenant_moveTempDb_result._Fields>, java.io.Serializable, Cloneable, Comparable<tenant_moveTempDb_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tenant_moveTempDb_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tenant_moveTempDb_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tenant_moveTempDb_resultTupleSchemeFactory());
    }

    public DbmsException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tenant_moveTempDb_result.class, metaDataMap);
    }

    public tenant_moveTempDb_result() {
    }

    public tenant_moveTempDb_result(
      DbmsException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tenant_moveTempDb_result(tenant_moveTempDb_result other) {
      if (other.isSetE()) {
        this.e = new DbmsException(other.e);
      }
    }

    public tenant_moveTempDb_result deepCopy() {
      return new tenant_moveTempDb_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DbmsException getE() {
      return this.e;
    }

    public tenant_moveTempDb_result setE(DbmsException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DbmsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tenant_moveTempDb_result)
        return this.equals((tenant_moveTempDb_result)that);
      return false;
    }

    public boolean equals(tenant_moveTempDb_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(tenant_moveTempDb_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tenant_moveTempDb_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tenant_moveTempDb_resultStandardSchemeFactory implements SchemeFactory {
      public tenant_moveTempDb_resultStandardScheme getScheme() {
        return new tenant_moveTempDb_resultStandardScheme();
      }
    }

    private static class tenant_moveTempDb_resultStandardScheme extends StandardScheme<tenant_moveTempDb_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tenant_moveTempDb_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DbmsException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tenant_moveTempDb_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tenant_moveTempDb_resultTupleSchemeFactory implements SchemeFactory {
      public tenant_moveTempDb_resultTupleScheme getScheme() {
        return new tenant_moveTempDb_resultTupleScheme();
      }
    }

    private static class tenant_moveTempDb_resultTupleScheme extends TupleScheme<tenant_moveTempDb_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tenant_moveTempDb_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tenant_moveTempDb_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DbmsException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
